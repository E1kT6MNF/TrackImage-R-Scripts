dat2[i] <- SAEfilter(c(dat$Time,dat[,i])),60)
dat2[i] <- SAEfilter(c(dat$Time,dat[,i]),60)
dat2[i] <- SAEfilter(data.frame(c(dat$Time,dat[,i])),60)
data.frame(c(dat$Time,dat[,i]))
data.frame(c(dat$Time,dat[,i]))
source("S:\\OTCCommon\\AD_Reliability\\RAT\\Projects\\John\\R Scripts\\Filtering\\SAEfilter_v2.r")
dat2[i] <- SAEfilter(dat$Time,dat[,i]),60)
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
dat[,2]-dat2[,2]
hist(dat[,2]-dat2[,2])
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
plot(dat[,1],dat[,2], tpye="l")
plot(dat[,1],dat[,2], type="l")
lines(dat2[,2],col="blue")
warnings()
lines(dat2[,2],col="blue")
plot(dat2[,1],dat2[,2], type="l")
summary(dat[,1])
dat <- read.delim(file=choose.files(),header=F,sep="")
summary(dat[,1])
dat$Time <- dat$Time*1000
names(dat) <- c("Time","P1_psi","P1_kpa","p2_psi","P2_kpa")
dat$Time <- dat$Time*1000
dat2 <- dat
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
plot(dat2[,1],dat2[,2], type="l")
plot(dat[,1],dat[,2], type="l")
lines(dat2[,2],col="blue")
write.table(dat2, file='clipboard', sep='\t',row.names = FALSE)
dat2$Time[which.max(dat2$P1_psi)]
?diff
?smooth.spline
fit <- smooth.spline(x=dat$Time,y=dat$P1_psi,spar=.5)
plot(fit)
plot(fit, type="l", col=red)
plot(fit, type="l", col="red")
fit <- smooth.spline(x=dat$Time,y=dat$P1_psi,spar=.4)
plot(fit, type="l", col="red")
fit <- smooth.spline(x=dat$Time,y=dat$P1_psi,spar=.25)
plot(fit, type="l", col="red")
dat[dat$Time=614,]
dat[dat$Time==614,]
dat <- read.delim(file=choose.files(),header=F,sep="")
names(dat) <- c("Time","P1_psi","P1_kpa","p2_psi","P2_kpa")
dat$Time <- dat$Time*1000
source("S:\\OTCCommon\\AD_Reliability\\RAT\\Projects\\John\\R Scripts\\Filtering\\SAEfilter_v2.r")
#  make new dataframe to hold filtered data
dat2 <- dat
#  filter cols 2-5
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
plot(dat[,1],dat[,2], type="l")
plot(dat[,1],dat[,3], type="l")
lines(dat2[,3],col="blue")
dat2$Time[which.max(dat2$P1_kpa),]
dat2$Time[which.max(dat2$P1_kpa)]
744-158
dat2$Time[which.max(dat2$P1_kpa)]
dat[dat$Time==586]
dat[dat$Time==586,]
View(dat)
fit <- smooth.spline(x=dat$Time,y=dat$P1_psi,spar=.25)
plot(fit, type="l", col="red")
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.25)
plot(fit, type="l", col="red")
max(fit)
plot(fit$y, type="l", col="red")
max(fit$y)
fit$x[fit$y>6.89]
dat$Time[which.max(dat$P1_kpa),]
dat$Time[which.max(dat$P1_kpa)]
plot(dat2[,1],dat2[,3], type="l")
lines(fit$y, col ="blue")
max(dat2$P1_kpa)
max(dat$P1_kpa)
max(fit$y)
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.25,nknots = .4*nrow(dat))
plot(fit, type="l", col="red")
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.4,nknots = .4*nrow(dat))
plot(fit, type="l", col="red")
lines(dat$P1_kpa,col="blue")
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.5,nknots = .4*nrow(dat))
plot(fit, type="l", col="red")
lines(dat$P1_kpa,col="blue")
plot(fit, type="l", col="red")
plot(fit, type="l", col="red", lwd=2)
lines(dat$P1_kpa,col="blue")
fit$y >= 6.9
fit$y[565:575]
summary(fit$y[1:500])
plot(fit, type="l", col="red", lwd=2)
lines(dat2$P1_kpa,col="blue")
max(dat$P1_kpa)
max(dat2$P1_kpa)
max(fit$y)
which.max(fit$y)
View(dat2)
dat2 <- dat2[dat2$P1_kpa>6.9,]
plot(dat2[,1],dat2[,3], type="l")
max(dat2$P1_kpa)
fit[1]
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
dat2 <- dat
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.5,nknots = .4*nrow(dat))
ends <- which(fit$y>=6.9)
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.4,nknots = .4*nrow(dat))
plot(fit, type="l", col="red", lwd=2)
max(fit$y)
dat2 <- dat
#  filter cols 2-5
for (i in 2:5){
dat2[i] <- SAEfilter(dat$Time,dat[,i],60)
}# end for
ends <- which(fit$y>=6.9)
dat_fit <- data.frame(Time=dat$Time, kPa=fit$y)
?filter
attach(dat_fit)
max(kPa)
dat_fit <- dat_fit[kPa >= 6.9]
dat_fit <- dat_fit[kPa >= 6.9,]
pburst <- max(kPa)
incl <- kPa >= 6.9
incl[1]
incl <- which(kPa >= 6.9)
incl[1]
Time <- Time-Time[incl[1]]
View(dat_fit)
dat_fit <- data.frame(Time=dat$Time, kPa=fit$y)
attach(dat_fit)
incl <- which(kPa >= 6.9)
incl[1]
Time[incl[1]]
View(dat_fit)
incl[1]
Time[incl[1]]
Time[567]
Time
dat <- read.delim(file=choose.files(),header=F,sep="")
dat <- read.delim(file=choose.files(),header=F,sep="")
dat <- read.delim(file=choose.files(),header=F,sep="")
dat <- dat[,c(1,3)]
fit <- smooth.spline(x=dat$Time,y=dat$P1_kpa,spar=.4,nknots = .4*nrow(dat))
fit <- smooth.spline(x=dat$V1,y=dat$V2,spar=.4,nknots = .4*nrow(dat))
dat_fit <- data.frame(Time=dat$Time, kPa=fit$y)
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
attach(dat_fit)
Time
incl <- which(kPa >= 6.9)
kPa
summary(kPa)
summary(dat$V3)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.4,nknots = .4*nrow(dat))
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
summary(kPa)
attach(dat_fit)
summary(kPa)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.4,nknots = .5*nrow(dat))
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
attach(dat_fit)
incl <- which(dat_fit$kPa >= 6.9)
incl[1]
dat_fit$Time[incl[1]]
dat_fit$Time <- dat_fit$Time-dat_fit$Time[incl[1]]
incl <- dat_fit$kPa >= 6.9
incl==TRUE[1]
which(incl==TRUE)[1]
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
incl <- dat_fit$kPa >= 6.9
dat_fit$Time[which(incl==TRUE)[1]]
dat_fit$Time <- dat_fit$Time-dat_fit$Time[which(incl==TRUE)[1]]
dat_fit <- dat_fit[incl]
dat_fit <- dat_fit[incl,]
pburst <- max(kPa)
kPa
summary(kPa)
str(kPa)
tburst <- dat_fit$Time[which.max(dat_fit$kPa)]
plot(dat_fit)
plot(dat_fit, type="l", lwd=2)
138.1/138.8
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.4,nknots = .4*nrow(dat))
max(fit$y)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .4*nrow(dat))
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .4*nrow(dat))
max(fit$y)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .5*nrow(dat))
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .5*nrow(dat))
max(fit$y)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .25*nrow(dat))
max(fit$y)
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .4*nrow(dat))
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .4*nrow(dat))
max(fit$y)
plot(fit, type="l")
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
incl <- dat_fit$kPa >= 6.9
dat_fit$Time <- dat_fit$Time-dat_fit$Time[which(incl==TRUE)[1]]
dat_fit <- dat_fit[incl,]
pburst <- max(kPa)
tburst <- dat_fit$Time[which.max(dat_fit$kPa)]
pburst <- max(dat_fit$kPa)
tburst <- dat_fit$Time[which.max(dat_fit$kPa)]
plot(dat_fit, type="l", lwd=2)
abline(h=pburst,lty="dotted", col="blue")
abline(h=pburst,v=tburst,lty="dotted", col="blue")
dat <- read.delim(file=choose.files(),header=F,sep="")
incl <- dat_fit$kPa >= 6.9
dat <- dat[,c(1,3)]
#  fit spline to data
fit <- smooth.spline(x=dat$V1,y=dat$V3,spar=.5,nknots = .4*nrow(dat))
dat_fit <- data.frame(Time=dat$V1, kPa=fit$y)
incl <- dat_fit$kPa >= 6.9
dat_fit$Time <- dat_fit$Time-dat_fit$Time[which(incl==TRUE)[1]]
dat_fit <- dat_fit[incl,]
pburst <- max(dat_fit$kPa)
tburst <- dat_fit$Time[which.max(dat_fit$kPa)]
plot(dat_fit, type="l", lwd=2)
abline(h=pburst,v=tburst,lty="dotted", col="blue"
)
source('S:/OTCCommon/AD_Reliability/RAT/Projects/John/R Scripts/Reference/RBench.r')
install.packages(c("matlab", "SuppDists"))
source('S:/OTCCommon/AD_Reliability/RAT/Projects/John/R Scripts/Reference/RBench.r')
?choose.files
install.packages("docxtractr")
install.packages(c("Cairo", "R6"))
source('S:/OTCCommon/AD_Reliability/RAT/Projects/John/R Scripts/handy scripts/readIMPAX.r', echo=TRUE)
dat_obj <- readIMPAX(choose.files(),200)
tail(dat_obj$data)
head(dat_obj$data)
dat_obj$data <- dat_obj$data[dat_obj$data[,1]>=-100]
dat <- dat_obj$data
dat <- dat[dat$mSec >= -100,]
setwd(choose.dir())
write.csv(dat,file="Bag010.csv",row.names = F)
source('S:/OTCCommon/AD_Reliability/RAT/Projects/John/R Scripts/Filtering/SAE CFC filter.r', echo=TRUE)
dat_60 <- SAEfilter(dat,60)
View(dat)
View(dat_60)
names(dat_60) <- c("mSec","KPa_60")
setwd(choose.dir())
write.csv(dat_60,file="Bag010_60.csv",row.names = F)
source('S:/OTCCommon/AD_Reliability/RAT/Projects/John/R Scripts/handy scripts/SAEfilter.r', echo=TRUE)
dat_60_2 <- SAEfilter(dat$mSec,dat$KPa,60)
hist(dat_60_2-dat_60$KPa_60)
diff <- dat_60_2-dat_60$KPa_60
srt(diff)
str(diff)
summary(diff)
setwd(choose.dir())
fileName <- choose.files()
fileName <- choose.files()
header <- readLines(fileName,n=-1)
infoRows <- grep("HEADER|CHANNELS",header)
sep_field <- header[grep("SEPARATOR:",header)]
sep = substr(sep_field,nchar(sep_field),nchar(sep_field))
header_names <-  read.delim(fileName, sep = sep, skip = infoRows[2] , nrows = 1,header = F,stringsAsFactors =F)
header_names <- header_names[1:ncol(header_names)-1]
#  Rename 1st time column
header_names[1] <- "Time"
#  Extact column units from TrackImage file
units <-  read.delim(fileName, sep = sep, skip = infoRows[2]+1 , nrows = 1,header = F,stringsAsFactors =F)
#  drop extra column from trailing semi-colon
units <- units[1:ncol(units)-1]
#  identify columns without ".x"
not_dotx <- substr(header_names[1,], nchar(header_names[1,])-1,nchar(header_names[1,])) != ".x"
#  identify columns to keep
Airbag2D <- grepl("*Airbag2D*",header_names)
header
header
rm(header)
not_dotx <- substr(header_names[1,], nchar(header_names[1,])-1,nchar(header_names[1,])) != ".x"
#  identify columns to keep
Airbag2D <- grepl("*Airbag2D*",header_names)
world <- grepl("*world_position*",header_names)
keepers <- as.logical(Airbag2D == TRUE | world == TRUE)
#  Set 1st column "Time" as a keeper
keepers[1] <- TRUE
#  combine logical vectors of keepers and not .x
keepers2 <- keepers == TRUE & not_dotx == TRUE
#  Read data
dat2 <- read.delim(fileName, sep = sep, skip = infoRows[2]+2, sep = sep = F)
#  drop extra column from trailing semi-colon
dat2 <- read.delim(fileName, sep = ";", skip = infoRows[2]+2, header = F)
dat2 <- read.delim(fileName, sep = sep, skip = infoRows[2]+2, header = F)
#  drop extra column from trailing semi-colon
dat2 <- dat2[1:ncol(dat2)-1]
#  subset dataframe to "keepers"
dat2 <-dat2[,keepers2 == TRUE]
units <- units[keepers2 == TRUE]
header_names <- header_names[keepers2 == TRUE]
#  rename step 1: get rid of "Airbag2D_"
newNames <- gsub("Airbag2D_","", header_names)
# rename step 2: get rid of "world_position_"
newNames <- gsub("_world_position","",newNames)
#  rename step 3: Get rid of ".y"
newNames <- gsub(".y","", newNames, fixed = TRUE)
#  append units to file names
#  newNames <- paste0(newNames,"_(",units,")") # un-comment this line for units in name for JMP, etc
#  rename data columns
names(dat2) <- newNames
#  clean up 001_ from column names
names(dat2) <- sub("001_","",names(dat2))
#  Convert to ms (uncomment next line as needed data is in seconds)
#  dat2$Time_ms <- dat2$Time_ms/1000
source('S:/ANACommon/Engineering/Product Reliability/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/cushion_stability.r', echo=TRUE)
source('P:/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/ReadTI_Traj_2D.R', echo=TRUE)
source('P:/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/ReadTI_Traj_2D.R', echo=TRUE)
source('P:/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/ReadTI_Traj_2D.R', echo=TRUE)
dat <- readTI_AB(choose.files())
View(dat)
source('S:/ANACommon/Engineering/Product Reliability/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/cushion_stability.r', echo=TRUE)
source('S:/ANACommon/Engineering/Product Reliability/Programming Tools/Newkirk GitHub/TrackImage-R-Scripts/cushion_stability.r', echo=TRUE)
CombineFS <- function(){
#  This script reads front and side view TrackImage .csv files and merges them into an single
#  combined data table.
#  Author: John Newkirk
#  Revision History
# 09/02/15 changed output to an object containing the source directory, number of tests,
#           results dataframe.
library(tidyr)
#  read function for reading and cleaning TrackImage .csv files
basePath <- getwd()
#  Set directory where TrackImage files are located.
TI_dir <- choose.dir(default = basePath, caption = "Select folder containing TrackImage .csv files")
#  make list of all .csv file in target directory, put in dataframe
#  TI_List <- dir(path=TI_dir,pattern=glob2rx("*-*.csv"),full.names=T,recursive=F)
tests <- data.frame(FilePath = dir(path=TI_dir,pattern=glob2rx("*-*.csv"),full.names=T,recursive=F) )
#  extract simple file name
tests$File <- gsub(".csv","",gsub(".*/","",tests$FilePath))
#  Extract video view orientation and test number
tests$Test <- as.factor(substr(tests$File,start = 3, stop = nchar(tests$File)))
tests$View <- as.factor(substr(tests$File,start = 1, stop = 1))
#  remove unneeded "File" column
tests <- tests[,c(1,3,4)]
#  unstack data
tests <- spread(tests, View, FilePath)
#  sort data
#  create directory path for output files
outPath <- paste0(TI_dir,"\\Output")
#  if directory already exists, don't make one otherwise...
if(!dir.exists(outPath)){dir.create(outPath, showWarnings = TRUE, recursive = FALSE, mode = "0777")}
#  change working directory to out path
setwd(outPath)
#
#  create empty dataframe for stacked data
dat2 <- data.frame()
#  Start For loop to read and process files
for (i in 1:nrow(tests)) {
#  read front and side files
datF <- readTI_AB(tests$F[i])
datS <- readTI_AB(tests$S[i])
#  append _F to end of all column names except time
names(datF)[-1] <- paste0(names(datF[2:ncol(datF)]),"_F")
#  append _F to end of all colun names except time
names(datS)[-1] <- paste0(names(datS[2:ncol(datS)]),"_S")
#  merge dataframes by Time
dat <- merge(datF,datS,by = "Time")
#  create column with test number
Test <- rep(tests$Test[i], nrow(dat))
#  Add test number column
dat <- cbind(Test, dat)
# Stack data set
dat2 <- rbind(dat2, dat)
}#  end for
#  Write csv file
write.csv(dat2, file=paste0(basename(TI_dir),".csv"),row.names=FALSE, na="")
#  Make object with results and traceability data
res <- list(Source = normalizePath(TI_dir,winslash = "/", mustWork = NA),Quantity = nrow(tests),data=dat2)
class(res) <- "TI_Table"
return(res)
} #  end function
source('S:/ANACommon/Engineering/Product Reliability/Programming Tools/Newkirk GitHub/R-Scripts/readIMPAX.r', echo=TRUE)
mSecLimit=c(0,100)
filename <- choose.files()
source('S:/ANACommon/Engineering/Product Reliability/Programming Tools/Newkirk GitHub/R-Scripts/SAEfilter.r', echo=TRUE)
ascii <- sapply(1:127,function(i) parse(text=paste("\"\\",structure(i,class="octmode"),"\"",sep=""))[[1]])
f  <- file(filename,"rb")
input <- c()
repeat {
chunk <- readBin(f,integer(),1,1)
if(chunk==26) break
input <- c(input,chunk)
}# end repeat
input <- strsplit(paste(input,collapse=" "),"( 13 10){1,} 91 |91 ")[[1]]
input <- input[input!=""]
tab1 <- data.frame()
for(i in 1:length(input)) {
section <- paste(ascii[as.numeric(strsplit(strsplit(input[i]," 93 13 10 ")[[1]][1]," ")[[1]])],collapse="")
input2 <- strsplit(strsplit(input[i]," 93 13 10 ")[[1]][2]," 13 10 ")[[1]]
for(j in 1:length(input2)) {
input3 <- strsplit(input2[j]," 61 ")[[1]]
parm <- paste(ascii[as.numeric(strsplit(input3[1]," ")[[1]])],collapse="")
value <- paste(ascii[as.numeric(strsplit(input3[2]," ")[[1]])],collapse="")
tab1 <- rbind(tab1,data.frame(section=section,parm=parm,value=value,stringsAsFactors=FALSE))
}# end for j
}# end for i
numVals <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="RECLEN","value"]))      vScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTSCALE","value"]))
vOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTOFFSET","value"]))
hScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZSCALE","value"]))
hOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZOFFSET","value"]))
dataType <- as.character(tab1[tab1$section=="DSP" & tab1$parm=="DATATYPE","value"])
unit <- as.character(tab1[tab1$section=="TRANSDUCER" & tab1$parm=="UNIT","value"])
if(dataType=="SHORT") {
reading <- readBin(f,integer(),numVals,2)*vScale+vOffset
}
if(dataType=="DOUBLE") {
reading <- readBin(f,double(),numVals,8)*vScale+vOffset
}
if(!(dataType %in% c("SHORT","DOUBLE"))) {stop("Unknown data type in Impart file header\n")}
mSec <- (0:(numVals-1))*hScale+hOffset
close(f)
ind <- mSec <= mSecLimit
dat <- data.frame(mSec=mSec[ind],reading=reading[ind])
colnames(dat) <- c("mSec",unit)
attr(dat,"filepath") <- filename
res <- list(filename=filename,header=tab1,data=dat)
class(res) <- "IMPAX"
tab1 <- data.frame()
for(i in 1:length(input)) {
section <- paste(ascii[as.numeric(strsplit(strsplit(input[i]," 93 13 10 ")[[1]][1]," ")[[1]])],collapse="")
input2 <- strsplit(strsplit(input[i]," 93 13 10 ")[[1]][2]," 13 10 ")[[1]]
for(j in 1:length(input2)) {
input3 <- strsplit(input2[j]," 61 ")[[1]]
parm <- paste(ascii[as.numeric(strsplit(input3[1]," ")[[1]])],collapse="")
value <- paste(ascii[as.numeric(strsplit(input3[2]," ")[[1]])],collapse="")
tab1 <- rbind(tab1,data.frame(section=section,parm=parm,value=value,stringsAsFactors=FALSE))
}# end for j
}# end for i
numVals <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="RECLEN","value"]))      vScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTSCALE","value"]))
View(tab1)
View(tab1)
numVals <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="RECLEN","value"]))
vScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTSCALE","value"]))
vOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTOFFSET","value"]))
hScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZSCALE","value"]))
hOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZOFFSET","value"]))
dataType <- as.character(tab1[tab1$section=="DSP" & tab1$parm=="DATATYPE","value"])
unit <- as.character(tab1[tab1$section=="TRANSDUCER" & tab1$parm=="UNIT","value"])
if(dataType=="SHORT") {
reading <- readBin(f,integer(),numVals,2)*vScale+vOffset
}
if(dataType=="DOUBLE") {
reading <- readBin(f,double(),numVals,8)*vScale+vOffset
}
if(!(dataType %in% c("SHORT","DOUBLE"))) {stop("Unknown data type in Impart file header\n")}
mSec <- (0:(numVals-1))*hScale+hOffset
close(f)
ind <- mSec <= mSecLimit
dat <- data.frame(mSec=mSec[ind],reading=reading[ind])
colnames(dat) <- c("mSec",unit)
attr(dat,"filepath") <- filename
res <- list(filename=filename,header=tab1,data=dat)
class(res) <- "IMPAX"
ascii <- sapply(1:127,function(i) parse(text=paste("\"\\",structure(i,class="octmode"),"\"",sep=""))[[1]])
f  <- file(filename,"rb")
input <- c()
repeat {
chunk <- readBin(f,integer(),1,1)
if(chunk==26) break
input <- c(input,chunk)
}# end repeat
input <- strsplit(paste(input,collapse=" "),"( 13 10){1,} 91 |91 ")[[1]]
input <- input[input!=""]
tab1 <- data.frame()
for(i in 1:length(input)) {
section <- paste(ascii[as.numeric(strsplit(strsplit(input[i]," 93 13 10 ")[[1]][1]," ")[[1]])],collapse="")
input2 <- strsplit(strsplit(input[i]," 93 13 10 ")[[1]][2]," 13 10 ")[[1]]
for(j in 1:length(input2)) {
input3 <- strsplit(input2[j]," 61 ")[[1]]
parm <- paste(ascii[as.numeric(strsplit(input3[1]," ")[[1]])],collapse="")
value <- paste(ascii[as.numeric(strsplit(input3[2]," ")[[1]])],collapse="")
tab1 <- rbind(tab1,data.frame(section=section,parm=parm,value=value,stringsAsFactors=FALSE))
}# end for j
}# end for i
numVals <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="RECLEN","value"]))
vScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTSCALE","value"]))
vOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="VERTOFFSET","value"]))
hScale <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZSCALE","value"]))
hOffset <- as.numeric(as.character(tab1[tab1$section=="DSP" & tab1$parm=="HORZOFFSET","value"]))
dataType <- as.character(tab1[tab1$section=="DSP" & tab1$parm=="DATATYPE","value"])
unit <- as.character(tab1[tab1$section=="TRANSDUCER" & tab1$parm=="UNIT","value"])
# type short = 2 (integer)
# type long = 4 (integer)
# type double = 8 (double)
# type single = 4 (double)
if(dataType=="SHORT") {
reading <- readBin(f,integer(),numVals,2)*vScale+vOffset
}
if(dataType=="DOUBLE") {
reading <- readBin(f,double(),numVals,8)*vScale+vOffset
}
if(!(dataType %in% c("SHORT","DOUBLE"))) {stop("Unknown data type in Impart file header\n")}
mSec <- (0:(numVals-1))*hScale+hOffset
close(f)
ind <- mSec <= mSecLimit
dat <- data.frame(mSec=mSec[ind],reading=reading[ind])
colnames(dat) <- c("mSec",unit)
attr(dat,"filepath") <- filename
res <- list(filename=filename,header=tab1,data=dat)
class(res) <- "IMPAX"
str(res)
res$header
